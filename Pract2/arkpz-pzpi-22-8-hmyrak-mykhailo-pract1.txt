МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ
РАДІОЕЛЕКТРОНІКИ


Звіт до
Практичного заняття №2
з дисципліни
«Аналіз та рефакторінг коду»
На тему: «Методи рефакторингу коду програмного забезпечення»



Виконав:
Ст. гр. ПЗПІ-22-8 
Гмирак Михайло Дмитрович



Перевірив:
ст. викладач кафедри ПІ
 Сокорчук Ігор Петрович


Харків 2024


Мета: Навчитися ідентифікувати проблеми в коді та використовувати 
відповідні методи рефакторингу для покращення його якості.


Завдання: 
1. Студент повинен обрати три методи рефакторингу коду із книги 
Мартіна Фаулера «Refactoring. Improving the Design of Existing Code».
2. Навести приклади свого особистого коду (з курсових, лабораторних 
або інших проєктів), який потребує покращення, 
та продемонструвати застосування обраних методів.
3. Кожен метод рефакторингу повинен супроводжуватись:
 • Описом проблеми, яку вирішує даний метод.
 • Кодом до і після застосування методу рефакторингу.
 • Поясненням переваг використаного методу.



Хід роботи: Кожен метод супроводжується прикладами, в яких видно 
проблему до рефакторингу та результати після його застосування. 
Слайди презентації містять всі обрані методи, приклади рефакторингу коду 
та висновки, які наведені у Додатку А.


1. Метод « Consolidate Conditional Expression ».
Опис: Цей метод полягає в об'єднанні кількох умовних виразів, які дають 
однаковий результат, в один
Погано:
1 if (user.isAdmin())
2 {
3 grantAccess();
4 }
5 if (user.hasPaidSubscription())
6 {
7 grantAccess();
8 }
9 if (user.isPremiumMember())
10 {
11 grantAccess();
12 }

Добре:
1 if (user.isAdmin() || user.hasPaidSubscription() || user.isPremiumMember())
2 {
3 grantAccess();
4 }


2. Метод « Substitute Algorithm »
Опис: Використовується, коли алгоритм, що реалізує певну функцію, можна 
замінити на простіший, ефективніший або більш зрозумілий.


Погано:
1 public int findMax(int[] numbers)
2 {
3 int max = Integer.MIN_VALUE;
4 for (int i = 0; i < numbers.length; i++)
5 {
6 for (int j = 0; j < numbers.length; j++)
7 {
8 if (numbers[i] >= numbers[j] && numbers[i] > max)
9 {
10 max = numbers[i];
11 }
12 }
13 }
14 return max;
15 }

Добре:
1 public int findMax(int[] numbers)
2 {
3 int max = Integer.MIN_VALUE;
4 for (int number : numbers) {
5 if (number > max) {
6 max = number;
7 }
8 }
9 return max;
10 }


3. Метод « Pull Up Field ».
Опис: Цей метод застосовується, коли кілька підкласів мають однакові поля, і 
ці поля можна підняти в базовий клас.

Погано:
1 class Car
2 {
3 protected int maxSpeed = 120;
4
5 public int getMaxSpeed()
6 {
7 return maxSpeed;
8 }
9 }
10
11 class Truck
12 {
13 protected int maxSpeed = 80;
14
15 public int getMaxSpeed()
16 {
17 return maxSpeed;
18 }
19 }


Добре:
1 class Vehicle
2 {
3 protected int maxSpeed;
4 
5 public int getMaxSpeed()
6 {
7 return maxSpeed;
8 }
9}
10
11 class Car extends Vehicle
12 {
13 public Car()
14 {
15 this.maxSpeed = 120;
16 }
17 }
18
19 class Truck extends Vehicle
20 {
21 public Truck()
22 {
23 this.maxSpeed = 80;
24 }
25 }


Висновок: Ми вивчили основи рефакторингу коду та його значення для 
покращення якості програмного забезпечення. 
Завдяки використанню методів, таких як виділення методу, перейменування 
методів і заміна умовної логіки поліморфізмом, 
ми змогли зменшити складність, підвищити читабельність і спростити 
підтримку коду.

Посилання на відеозапис: https://youtu.be/6iNqbXlV-A0

Список використаних джерел:
1) https://refactoring.guru/ru/replace-temp-with-query
2)https://uk.wikipedia.org/wiki/%D0%9F%D0%B5%D1%80%D0%B5%D0
%BC%D1%96%D1%89%D0%B5%D0%BD%D0%BD%D1%8F_%D0%B
C%D0%B5%D1%82%D0%BE%D0%B4%D1%83


ДОДАТОК А
Презентація на тему «Методи рефакторингу коду програмного 
забезпечення».
Рисунок 1 – Титульний слайд
Рисунок 2 – Метод «Consolidate Conditional Expression»
Рисунок 3 – Приклад коду до рефакторингу
Рисунок 4 – код після рефакторингу за допомогою метода Consolidate 
Conditional Expression
Рисунок 5 – Метод «Substitute Algorithm» 
Рисунок 6 – Приклад коду до рефакторингу
Рисунок 7 – Код після рефакторингу за допомогою метода Substitute 
Algorithm
Рисунок 8 – Метод «Pull Up Field» 
Рисунок 9 – Приклад коду до рефакторингу
Рисунок 10 - Код після рефакторингу за допомогою метода Pull Up Field
Рисунок 11 – Висновки
Рисунок 12 – Список використаних джерел
Рсиунок 13 – слайд “ Дякую за увагу ”
