МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Звіт
До лаборотної роботи №3
З дисципліни:
«Аналіз та рефакторінг коду»





	



Виконав:                                                                                       
Ст. гр. ПЗПІ-22-8                                                                                                       
Гмирак Михайло Дмитрович                                                                                     



Перевірив:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович  








Харків 2024

     РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
     
     1 МЕТА РОБОТИ
     
     Розробка бізнес-логики та функції адміністрування серверної частини  програмної системи 
     
     2      ХІД РОБОТИ
     2.1 Розробка бізнес-логіки серверної частини програмної системи
     
     Основні функції бізнес-логіки:
     Проект призначений для автоматизації ключових процесів бібліотечної діяльності. Основними елементами бізнес-логіки є видача та повернення екземплярів книг, управління читачами, додавання одразу багатьох нових екземлярів книг до бібліотеки, а також облік статистики щодо використання бібліотечних ресурсів.
     Бізнес-логіка включає наступні функції:
     * Видача та повернення книг у читача.
     * Додавання та облік екземплярів книг у бібліотеку.
     * Формуляр читача, вкючає дані читача, історію позичань,  поточні книги які зараз у користувача на руках.
     * Підрахунок статистичних даних: кількість книг, кількість екзмеплярів книг, кількість доступних екземплярів книг, кількість читачів,  кількість активних читачів (тих хто хоча б раз брав книгу в бібліотеці),  кількість рідкисних виданнь (ті книги  які зараз не на руках у читача, але також недоступні для видачі),  середній час читання книги та макимальний час читання книги. 
     Розрахунок середнього часу між видачею (StatusId = 2) та поверненням (StatusId = 3) обчислюється за формулою:
     A_verageReadingTime=(???(ReturnTime-BorrowTime)?)/(COUNT(Items WHERE StatusId = 3))  
     
     Розрахунок максимального часу (Найбільший час між видачею та поверненням) читання книги (MaxReadingTime) обчислюється за формулою:
     
     MaxReadingTime= max(ReturnTime-BorrowTime)
     
     2.2 Розробка функцій адміністрування серверної частини
     
     Реалізовано функції адміністрування, які дозволяють адміністратору:
     * Видаляти, переглядати або оновлювати профілі читачів.
     * Додавати екземпляри книг до каталогу 
     * Видавати книги читачам, та повертати книги у читачів назад до бібілотеки. 
     * Формування формуляра читача (з історію видачею та поверненням екземплярів книг).
     * Одержувати детальну статистику використання бібліотеки, зокрема середній та максимальний час читання книг.
     Для наочного зображення логіки роботи було створено UML-діаграми діяльності та взаємодії (рисунки 2.2.1, 2.2.2).
     
     
     Рисунок 2.2.1 - UML-діаграма діяльності
     
     
     Рисунок 2.2.2 - UML-діаграма взаємодії для серверної частини
     
     2.3 Програмна реалізація бізнес-логіки та функцій адміністрування.
     
     Була створена програмна реалізація бізнес-логіки та функцій адміністрування з використанням .NET 6. 
     
     2.3.1 Додавання нових екземплярів книг 
     
     Даний ендпойнт дозволяє додати екземпляри книг до каталогу бібліотеки. Він перевіряє наявність книги в базі даних, створює нові екземпляри з унікальними ідентифікаторами, а також записує початкову історію для кожного екземпляра.
     Основні етапи роботи:
     * Знаходження книги в базі даних за ідентифікатором BookId.
     * Створення екземплярів книги на основі вхідного запиту.
     * Збереження змін у базі даних.
     * Формування початкової історії для кожного екземпляра з StatusId = 1 (доступний для видачі).
     (Програмний код знаходиться у додатку А)
     
     2.3.2 Видача книги читачеві 
     
     Цей ендпойнт реалізує видачу книги читачеві. Він перевіряє наявність читача, знаходить доступний екземпляр книги (за ідентифікатором книги або екземпляра) та оновлює його статус і історію.
     Основні етапи роботи:
     * Перевірка наявності читача у базі даних.
     * Пошук доступного екземпляра книги.
     * Оновлення статусу екземпляра (Available = false) і прив'язка до читача.
     * Додавання запису до історії з StatusId = 2 (виданий).
     
     2.3.3 Повернення книги до бібліотеки (/business/return)
     
     Ендпойнт реалізує функцію повернення книги. Він дозволяє або повернути всі книги, які є у читача, або конкретний екземпляр.
     Основні етапи роботи:
     * Якщо вказано ReaderId без ItemId, повертаються всі книги читача.
     * Якщо вказано ItemId, перевіряється статус екземпляра та оновлюється його доступність.
     * Для кожного поверненого екземпляра додається запис у історію з StatusId = 3 (повернений).
     (Код реалізації видачі та повернення книг у бібліотеку наведений у додатку Б)
     
     2.3.4 Отримання статистики
     
     Для управління бібліотекою важливою частиною є збір статистичних даних. Наведено функцію, яка реалізує такі метрики:
     * Кількість заголовків книг у бібліотеці.
     * Кількість екземплярів книг.
     * Кількість книг, що видані на даний момент.
     * Кількість доступних для видачі книг.
     * Кількість книг у спеціальному сховищі.
     * Кількість зареєстрованих читачів.
     * Кількість активних читачів.
     * Кількість популярних книг.
     * Середній час читання.
     * Максимальний час читання.
     (Код реалізації отримання статистики наведений у додатку В)
     
     2.3.5 Формування формуляра читача
     
     Ендпойнти для роботи з формуляром читача забезпечують адміністратору бібліотеки можливість перегляду, створення, оновлення, видалення та отримання детальної інформації про читача разом із його історією позик.
     
     Висновки: У результаті виконання лабораторної роботи було розроблено бізнес-логіку та функції адміністрування серверної частини програмної системи для автоматизації роботи бібліотек. Система дозволяє ефективно керувати бібліотечними фондами, забезпечити облік та управління читачами, збирати та аналізувати статистичні дані про використання бібліотечних ресурсів.
     Розробка включала UML-діаграми, програмну реалізацію основних функцій та тестування. Це забезпечує інтеграцію ключових процесів для підвищення ефективності роботи бібліотек.
     
     Посилання на відеоролик: https://youtu.be/mqiuMKHAm_w
     
     






















Додаток А
Додання нових екземлярів до бібіліотеки

1.  endpoints.MapPost("/business/additems", (AddItemsRequest request) =>
2.  {
3.      var book = db.Books.Find(request.BookId);
4.      if (book == null)
5.      {
6.          return Results.NotFound();
7.      }
8.  
9.      var items = new List<Item>();
10.     for (int i = 0; i < request.Count; i++)
11.     {
12.         var item = new Item
13.         {
14.             BookId = request.BookId,
15.             Description = request.Description,
16.             Available = request.Available
17.         };
18.         db.Items.Add(item);
19.         items.Add(item);
20.     }
21.  
22.     db.SaveChanges();
23.     return Results.Ok(items.Select(i => i.ItemId).ToArray());
24. }).RequireAuthorization();



Додаток Б
Реалізація видачи книги читачам, та повернення книги у читачів 

1.  endpoints.MapPost("/business/giveout", (GiveBookRequest request) =>
2.  {
3.      var reader = db.Readers.Find(request.ReaderId);
4.      if (reader == null)
5.      {
6.          return Results.NotFound();
7.      }
8.  
9.      var item = db.Items.FirstOrDefault(i => i.BookId == request.BookId && 
10.    i.Available == true);
11.     if (item == null)
12.     {
13.         return Results.NotFound("No available item found.");
14.     }
15. 
16.     item.Available = false;
17.     item.ReaderId = request.ReaderId;
18. 
19.     var hist = new Hist
20.     {
21.         StatusId = 2,
22.         ItemId = item.ItemId,
23.         ReaderId = request.ReaderId,
24.         Comment = request.Comment
25.     };
26.     db.Hists.Add(hist);
27. 
28.     db.SaveChanges();
29.     return Results.Ok(item.ItemId);
30. }).RequireAuthorization();
31. 
32. endpoints.MapPost("/business/return", (ReturnBookRequest request) =>
33. {
34.     if (request.ReaderId.HasValue && !request.ItemId.HasValue)
35.     {
36.         var items = db.Items.Where(i => i.ReaderId == 
37.          request.ReaderId).ToList();
38.         if (!items.Any())
39.         {
40.             return Results.NotFound("No items found for the specified reader.");
41.         }
42. 
43.         foreach (var item in items)
44.         {
45.             item.Available = true;
46.             item.ReaderId = null;
47. 
48.             var hist = new Hist
49.             {
50.                 StatusId = 3,
51.                 ItemId = item.ItemId,
52.                 ReaderId = request.ReaderId,
53.                 Comment = request.Comment
54.             };
55.             db.Hists.Add(hist);
56.         }
57. 
58.         db.SaveChanges();
59.         var itemIds = items.Select(i => i.ItemId).ToArray();
60.         return Results.Ok(itemIds);
61.     }
62.     else
63.     {
64.         var item = db.Items.Find(request.ItemId);
65.         if (item == null)
66.         {
67.             return Results.NotFound();
68.         }
69. 
70.         if (item.ReaderId == null)
71.         {
72.             return Results.Ok("No action taken as the item has no associated 
73.              reader.");
74.         }
75. 
76.         var currentReaderId = item.ReaderId;
77. 
78.         item.Available = true;
79.         item.ReaderId = null;
80. 
81.         var hist = new Hist
82.         {
83.             StatusId = 3,
84.             ItemId = item.ItemId,
85.             ReaderId = request.ReaderId ?? currentReaderId,
86.             Comment = request.Comment
87.         };
88.         db.Hists.Add(hist);
89. 
90.         db.SaveChanges();
91.         return Results.Ok(item.ItemId);
92.     }
93. }).RequireAuthorization();
























Додаток В
Отримання статистики бібліотеки.
1.  public static void MapStatsEndpoints(this IEndpointRouteBuilder endpoints, 
2. lib4Context db)
3.  {
4.      endpoints.MapGet("/stat", () =>
5.      {
6.          var bookTitlesCount = db.Books.Count();
7.          var bookItemsCount = db.Items.Count();
8.          var itemsOnLoanCount = db.Items.Count(i => i.ReaderId.HasValue);
9.          var availableItemsCount = db.Items.Count(i => i.Available);
10.          var specialStorageCount = bookItemsCount - (itemsOnLoanCount + 
11.        availableItemsCount);
12.         var readersCount = db.Readers.Count();
13.         var activeReadersCount = db.Hists.Select(h => 
14.         h.ReaderId).Distinct().Count();
15.         var popularBookTitlesCount = db.Books.Count(b => b.Items.Any(i => 16.         db.Hists.Any(h => h.ItemId == i.ItemId)));
17. 
18.         var currentTime = DateTime.UtcNow;
19. 
20.         // Fetch data and switch to LINQ to Objects
21.         var rawData = db.Hists
22.             .Where(h => h.StatusId == 2 || h.StatusId == 3)
23.             .ToList(); // Force execution of the query
24. 
25.         var readingTimes = rawData
26.             .GroupBy(h => h.ItemId)
27.             .Select(g => new
28.             {
29.                 ItemId = g.Key,
30.                 ReadingTime = g
31.                     .Where(h => h.StatusId == 2)
32.                     .Select(h => h.Time)
33.                     .DefaultIfEmpty(currentTime)
34.                     .Zip(
35.                         g.Where(h => h.StatusId == 3)
36.                          .Select(h => h.Time)
37.                          .DefaultIfEmpty(currentTime),
38.                         (start, end) => (end - start).TotalMinutes
39.                     )
40.             })
41.             .SelectMany(x => x.ReadingTime)
42.             .ToList();
43. 
44.         var averageReadingTime = readingTimes.Any() ? 
45.         readingTimes.Average() : 0;
46.         var maxReadingTime = readingTimes.Any() ? readingTimes.Max() : 0;
47. 
48.         return Results.Ok(new
49.         {
50.             BookTitlesCount = bookTitlesCount,
51.             BookItemsCount = bookItemsCount,
52.             ItemsOnLoanCount = itemsOnLoanCount,
53.             AvailableItemsCount = availableItemsCount,
54.             SpecialStorageCount = specialStorageCount,
55.             ReadersCount = readersCount,
56.             ActiveReadersCount = activeReadersCount,
57.             PopularBookTitlesCount = popularBookTitlesCount,
58.             AverageReadingTime = averageReadingTime,
59.             MaxReadingTime = maxReadingTime
60.         });
61.     }).RequireAuthorization();
62. }
2
