МІНІСТЕРСТВО ОСВІТИ І НАУКИ 
УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ 
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Звіт

До лаборотної роботи №1
З дисципліни:
«Аналіз та рефакторінг коду»





	


Виконав:                                                                                       
Ст. гр. ПЗПІ-22-8                                                                                                       
Гмирак Михайло Дмитрович                                                                                      

Перевірив:
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович  




Харків 2024


РОБКА VISION & SCOPE 
     
          1.1 Мета роботи
          Описати проєкт у форматі Vision & Scope. 
          1.2 Хід роботи
          1.2.1 Написати перший розділ, де неохідно описати 
актуальність проблем, які вирішує програмна система. Також описати 
інші аналогічні рішення, що вирішують ту ж саму проблему, або 
використовують ті ж самі методи вирішення завдань. Описати способи 
монетизації проєкту. 
          1.2.2 Написати другий розділ, в якому описати призначення 
системи, вказати її головні функціональні можливості та бізнес-логіку 
проєкту. 
          1.2.3 Написати третій розділ, в якому описати функції кожної з 
частин системи. 
          1.2.4 Написати четвертий розділ, в якому вказати усі 
технології, які будуть використані у проєкті. 
          Висновок: Під час виконання лабораторної роботи було 
розкрито призначення програмної системи та описано проєкт у форматі 
Vision & Scope, що винесено у Додаток А











Додаток А

Vision and Scope Document
Програмна система для 
автоматизації роботи 
бібліотек
Версія 1.0
Підготовлено Гмирак М. Д.
ст. гр. ПЗПІ-22-8
29.11.2024




Зміст

Зміст	4
Журнал версій	4
1.	Бізнес вимоги	5
1.1.	Передумови	5
1.2.	Бізнес можливості 	5
2.	Концепція рішення	6
2.1.	 Окреслення концепції	6
2.2	Головна функціональність	7
3.	Рамки та обмеження	10
3.1.	Рамки первинного випуску	10
3.2.	Рамки наступних випусків	11
4.	Бізнес-контекст	12
4.1.	Робоче середовище	12





Журнал версій


Назва
Дата
Причина змін
Версія
SLC System
29.11.2024

1.0
SLC System 2.0
30.11.2024
Додання пункту 2.3; виправлення пунктів 3.1; 
3. 2
2.0


1. Бізнес вимоги
1.1 Передумови

Сучасні бібліотеки зіштовхуються з низкою проблем, пов’язаних із управлінням 
бібліотечними фондами, обліком користувачів, відслідковуванням наявності 
книг і їх місцезнаходженням. Традиційні методи обліку часто є незручними та 
неефективними, що призводить до помилок і затримок у процесах видачі та 
повернення книг. Відсутність сучасної автоматизованої системи обліку 
створює незручності як для бібліотекарів, так і для користувачів. Крім того, 
традиційні рішення не враховують важливість підтримки оптимальних умов 
для збереження бібліотечних фондів, таких як температура та вологість, що 
може призвести до пошкодження рідкісних і цінних книг.

1.2 Бізнес можливості

На основі аналізу існуючих рішень на ринку можна визначити кілька напрямків 
для покращення управління бібліотеками. Більшість існуючих систем мають 
обмежений функціонал або не підтримують інтеграцію з іншими 
технологіями, що ускладнює їх використання. Розробка програмної системи, 
яка забезпечує ефективний облік бібліотечних ресурсів, інтеграцію з IoT-
пристроями для моніторингу умов зберігання та надає зручний доступ до 
електронного каталогу, дозволить бібліотекам підвищити ефективність 
роботи та полегшити управління ресурсами.
     Вже існуючі рішення:
     Library Management System (LMS)
     *	Переваги: Легкість в управлінні обліком книг, наявність 
автоматизованих процесів видачі та повернення. 
Недоліки: Обмежена можливість інтеграції з новими технологіями (IoT, 
розумний моніторинг) та відсутність гнучких інтерфейсів для користувачів.
     *	Koha
     Переваги: Безкоштовне програмне забезпечення з відкритим кодом, 
підтримка багатомовності, відслідковування бібліотечних ресурсів. 
Недоліки: Можливості обмежені старими технологіями, відсутність 
інтеграції з сучасними IoT-пристроями.
     Аналіз цих рішень показує необхідність створення нової системи, яка 
поєднує ефективне управління бібліотечними ресурсами, автоматизацію, 
інтеграцію з сучасними технологіями (IoT), та зручність для користувачів.
     
2. Концепція рішення
2.1 Окреслення концепції

Програмна система автоматизації роботи бібліотек буде включати функції 
для реєстрації книг, ведення електронного каталогу, відслідковування 
наявності та місцезнаходження книг, автоматизації процесу видачі та 
повернення книг, а також інтеграцію з IoT для моніторингу умов зберігання. 
Користувачі зможуть шукати книги за різними критеріями та переглядати 
інформацію про книги в реальному часі.
     Система також дозволить адміністраторам ефективно управляти 
обліковими записами користувачів, контролювати доступ до книг та 
забезпечити збереження бібліотечних фондів шляхом моніторингу 
температури та вологості в приміщеннях.
     
2.2 Головна функціональність 
2.2.1 Функціональність для користувачів

     Реєстрація та авторизація користувачів (MF-1) 
Користувачі можуть реєструватися та авторизуватися в системі через 
електронну пошту або соціальні мережі, що забезпечує зручний доступ до 
особистого кабінету.
     Пошук книг за різними критеріями (MF-2) 
Користувачі можуть здійснювати пошук книг за назвою, автором, жанром, 
видавництвом або іншими параметрами.
     Перегляд електронного каталогу (MF-3) 
Користувачі можуть переглядати електронний каталог книг в реальному часі, 
що дозволяє отримувати актуальну інформацію про наявність книг у 
бібліотеці.
     Видача та повернення книг (MF-4) 
Користувачі можуть здійснювати процес видачі та повернення книг через 
автоматизовану систему, що мінімізує людський фактор і спрощує цей процес.
     Інтерфейс для резервування книг (MF-5) 
Користувачі можуть резервувати книги, які тимчасово відсутні, що дозволяє 
їм отримати доступ до потрібних матеріалів у майбутньому.
     Інтеграція з IoT для моніторингу умов зберігання книг (MF-6) 
Система інтегрується з IoT-пристроями для моніторингу температури та 
вологості в бібліотеці, що дозволяє підтримувати оптимальні умови для 
збереження книг.
     
2.2.2 Функціональність для адміністраторів

     Управління користувачами (MF-7) 
Адміністратори можуть створювати, редагувати та видаляти облікові 
записи користувачів, призначати ролі та рівні доступу, що забезпечує 
контроль над доступом до ресурсів бібліотеки.
     Управління бібліотечними фондами (MF-8) 
Адміністратори можуть реєструвати нові книги в системі, змінювати 
інформацію про наявні книги та відслідковувати їх місцезнаходження.
     Налаштування системи (MF-9) 
Адміністратори можуть встановлювати глобальні параметри системи, такі 
як правила для автоматичного резервування, ліміти на кількість книг, які 
можуть бути видані одному користувачеві, та інші параметри.
     Моніторинг активності користувачів (MF-10) 
Адміністратори можуть переглядати активність користувачів, історію 
видачі та повернення книг, а також отримувати звіти про несправності або 
збої в роботі системи.
     Створення звітів (MF-11) 
Адміністратори можуть створювати звіти про використання бібліотечних 
фондів, популярність книг, затримки у поверненні та інші важливі аспекти 
діяльності бібліотеки.
     
2.3 Бізнес логіка

Бізнес логіка є основою роботи програмної системи, забезпечуючи виконання 
ключових процесів автоматизації бібліотечних задач. Основні аспекти:
1.	Управління бібліотечними фондами
*	Реєстрація, редагування та видалення даних про книги.
*	Відслідковування стану книг: наявність, резервування, 
місцезнаходження.
2.	Автоматизація процесу видачі та повернення книг
*	Відстеження історії видачі та повернення.
*	Генерація автоматичних нагадувань користувачам про терміни 
повернення книг.
3.	Моніторинг умов зберігання книг
*	Обробка даних, отриманих від IoT-пристроїв.
*	Виявлення відхилень від оптимальних параметрів температури і 
вологості.
*	Надсилання сповіщень адміністраторам у разі критичних змін.
4.	Управління обліковими записами користувачів
*	Реєстрація нових користувачів, призначення ролей.
*	Контроль за доступом до ресурсів.
5.	Аналітика та звітність
*	Створення звітів про використання бібліотечних ресурсів.
*	Визначення популярності книг і статистики запитів.

3. Рамки та обмеження
3.1 Рамки первинного випуску (Функціональність серверної частини та 
IoT-клієнта)

Серверна частина:
     *	Обробка HTTP-запитів: сервер забезпечує обмін даними між 
клієнтами та базою даних через RESTful API.
     *	Реалізація бізнес-логіки: включає управління бібліотечними 
фондами, моніторинг стану книг, реєстрацію та аутентифікацію 
користувачів.
     *	Взаємодія з базою даних: зберігання та отримання даних про книги, 
користувачів та історію операцій.
     *	Підтримка MQTT-протоколу: отримання даних від IoT-пристроїв і 
надсилання команд у разі виявлення відхилень.
     *	Безпека: шифрування даних, аутентифікація та контроль доступу 
до серверу.
IoT-клієнт:
     *	Датчики: пристрої для моніторингу температури та вологості, 
підключені до мікроконтролера (Arduino).
     *	Обмін даними через MQTT: публікація інформації про умови в 
приміщеннях, підписка сервером на ці дані.
     *	Реакція на зміну умов: у разі відхилень від нормальних параметрів 
сервер надсилає команди для активації пристроїв (наприклад, кондиціонера або 
осушувача повітря).
     *	Енергоефективність: IoT-пристрої працюють у режимі зниженого 
енергоспоживання з періодичною передачею даних.

3.2 Рамки наступних випусків (Функціональність веб-клієнта та 
мобільного клієнта)
     
Веб-клієнт:
     *	Інтерактивний інтерфейс: доступ до електронного каталогу з 
можливістю пошуку книг за різними критеріями.
     *	Керування резервуванням: користувачі можуть переглядати 
наявність книг і резервувати їх онлайн.
     *	Особистий кабінет: можливість переглядати історію запитів, 
активні резервування та терміни повернення книг.
     *	Адаптивний дизайн: оптимізований для використання як на 
комп’ютерах, так і на мобільних пристроях.
Мобільний клієнт:
     *	Повний доступ до функціональності: включає пошук, перегляд 
каталогу, резервування, а також доступ до історії операцій.
     *	Push-сповіщення: нагадування про повернення книг, доступність 
заброньованих екземплярів, а також попередження про зміну умов зберігання 
книг.
     *	Кросплатформенність: розробка на React Native забезпечує 
підтримку iOS та Android.
     *	Оффлайн-режим: користувачі можуть переглядати збережені 
дані без підключення до інтернету, із синхронізацією при відновленні доступу.
4. Бізнес-контекст
4.1 Робоче середовище

Для реалізації програмної системи автоматизації роботи бібліотек 
використовуються різноманітні програмні інструменти та технології, що 
дозволяють ефективно обробляти дані, забезпечувати безпеку та 
підтримувати інтеграцію з іншими системами.
     Backend (серверна частина):
     *	C# (ASP.NET Core): Основна мова і платформа для розробки 
серверної частини. ASP.NET Core використовується для створення веб-API, які 
забезпечують обмін даними між сервером і клієнтськими додатками, такими 
як веб-інтерфейси чи мобільні додатки. Завдяки цьому фреймворку 
забезпечується висока продуктивність, безпека та можливість легкої 
інтеграції з іншими системами.
     *	Entity Framework Core (EF Core): ORM (об'єктно-реляційне 
відображення), яке спрощує роботу з базою даних, зокрема виконання CRUD-
операцій. У твоєму проєкті EF Core забезпечує інтерактивну взаємодію з 
бібліотечною базою даних, автоматизуючи створення запитів до таблиць, 
таких як книги, читачі, категорії та інше.
     *	SQL Server (через SQL Server Management Studio): Основна 
реляційна база даних для зберігання інформації про книги, читачів, статус 
бронювань, історію видач і повернень. SQL Server забезпечує надійність і 
продуктивність для обробки великої кількості даних, а SSMS використовується 
для налаштування, адміністрування і створення складних запитів.
     Frontend (клієнтська частина):
     *	Next.js: Фреймворк для React, який дозволяє створювати 
універсальні (серверно-рендеринговані) додатки, оптимізуючи швидкість 
завантаження сторінок та SEO, що особливо корисно для веб-інтерфейсу 
бібліотечної системи.
     *	React: Бібліотека для побудови інтерфейсів користувача, яка 
використовується для створення інтерактивних та динамічних веб-сторінок 
бібліотечної системи.
     Мобільний додаток:
     *	React Native: Платформа для розробки мобільних додатків для iOS 
та Android за допомогою JavaScript і React, що забезпечує кросплатформний 
доступ до бібліотечної системи з мобільних пристроїв.
     *	Expo: Інструмент для спрощення розробки мобільних додатків на 
React Native без потреби налаштовувати додаткові інструменти, що дозволяє 
швидше і ефективніше створювати мобільні додатки для бібліотек.
     Інтеграція з IoT:
     *	MQTT (Message Queuing Telemetry Transport): Протокол обміну 
повідомленнями між сервером і IoT-пристроями. У контексті бібліотечної 
системи, MQTT використовується для моніторингу умов зберігання книг, 
таких як температура та вологість у бібліотечних фондах, а також для 
інтеграції з іншими розумними пристроями.
     *	Arduino: Мікроконтролер, що використовується для створення IoT-
пристроїв, таких як датчики температури і вологості, які підключаються до 
сервера через MQTT та забезпечують моніторинг умов зберігання фондів 
бібліотеки.
     Ці технології забезпечують ефективне управління бібліотечними 
ресурсами, автоматизацію обліку, а також моніторинг умов зберігання для 
оптимізації бібліотечної діяльності.
     
     
     

    Список викорестених джерел:
     
     
1.	Google Cloud. Firebase Firestore: Documentation and Guides. [Онлайн 
ресурс]. – Доступно за посиланням: 
https://firebase.google.com/docs/firestore
2.	MQTT.org. MQTT: The Standard for IoT Messaging. [Онлайн ресурс]. – 
Доступно за посиланням: https://mqtt.org/
3.	Arduino. Official Arduino Documentation. [Онлайн ресурс]. – Доступно за 
посиланням: https://www.arduino.cc/en/Guide
4.	Next.js. Next.js Documentation. [Онлайн ресурс]. – Доступно за 
посиланням: https://nextjs.org/docs
5.	Expo. Introduction to Expo for React Native Development. [Онлайн ресурс]. – 
Доступно за посиланням: https://docs.expo.dev/
6.	Martin, R. Clean Code: A Handbook of Agile Software Craftsmanship. – 
Prentice Hall, 2008. – 464 p.
7.	Mozilla Developer Network (MDN). Express.js Overview. [Онлайн ресурс]. – 
Доступно за посиланням: https://developer.mozilla.org/en-
US/docs/Learn/Server-side/Express_Nodejs


Посилання на відео: https://youtu.be/wFmH74eWZd8




1

