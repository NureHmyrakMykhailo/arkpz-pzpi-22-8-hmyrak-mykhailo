МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Звіт
До лаборотної роботи №1
З дисципліни «Аналіз та рефакторінг коду»
на тему «Розробка Vision & Scope»






	


Виконав:                                                                                         
Ст. гр. ПЗПІ-22-8                                                                                                       
Гмирак Михайло Дмитрович                                                                                   
	

Перевірив:
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович    




Харків 2024

1 РОЗРОБКАБКА VISION & SCOPE

     1.1 Мета роботи
     
     Описати  проєкт «Програмна система для автоматизації роботи бібліотек» у форматі Vision & Scope.
     
     1.2 Хід роботи
     
          Написати перший розділ, де неохідно описати актуальність проблем, які вирішує програмна система. Також описати інші аналогічні рішення, що вирішують ту ж саму проблему, або використовують ті ж самі методи вирішення завдань. Описати способи монетизації проєкту. 
     Написати другий розділ, в якому описати призначення системи, вказати її головні функціональні можливості та бізнес-логіку проєкту. 
          Написати третій розділ, в якому описати функції кожної з частин системи. 
     Написати четвертий розділ, в якому вказати усі технології, які будуть використані у проекті. 
     
       Висновки
      Під час виконання лабораторної роботи було розкрито призначення програмної системи та описано проєкт у форматі Vision & Scope, що винесено у Додаток А
     
     Посилання на відео: https://youtu.be/wFmH74eWZd8


Додаток А
Vision & Scope


КОНЦЕПЦІЯ ТА РАМКИ ПРОЄКТУ «ПРОГРАМНОЇ СИСТЕМИ ДЛЯ АВТОМАТИЗАЦІЇ РОБОТИ БІБЛІОТЕК» 
Версія 1.0
Розроблено ст. гр. ПЗПІ-22-8
Гмирак Михайло 
29.11.2024




Зміст

Зміст	4
Журнал версій	4
1.	Бізнес вимоги	5
1.1.	Передумови	5
1.2.	Бізнес можливості 	5
2.	Концепція рішення	6
2.1.	 Окреслення концепції	6
2.2	Головна функціональність	6
3.	Рамки та обмеження	9
3.1.	Рамки первинного випуску	9
3.2.	Рамки наступних випусків	10
4.	Бізнес-контекст	10
4.1.	Робоче середовище	10





Історія змін

Назва
Дата
Причина змін
Версія
SLC System
29.11.2024

1.0
SLC System 2.0
30.11.2024
Додання пункту 2.3; виправлення пунктів 3.1; 3. 2
2.0
1. Бізнес вимоги
1.1 Передумови
Сучасні бібліотеки зіштовхуються з низкою проблем, пов’язаних із управлінням бібліотечними фондами, обліком користувачів, відслідковуванням наявності книг і їх місцезнаходженням. Традиційні методи обліку часто є незручними та неефективними, що призводить до помилок і затримок у процесах видачі та повернення книг. Відсутність сучасної автоматизованої системи обліку створює незручності як для бібліотекарів, так і для користувачів. Крім того, традиційні рішення не враховують важливість підтримки оптимальних умов для збереження бібліотечних фондів, таких як температура та вологість, що може призвести до пошкодження рідкісних і цінних книг.

1.2 Бізнес можливості

На основі аналізу існуючих рішень на ринку можна визначити кілька напрямків для покращення управління бібліотеками. Більшість існуючих систем мають обмежений функціонал або не підтримують інтеграцію з іншими технологіями, що ускладнює їх використання. Розробка програмної системи, яка забезпечує ефективний облік бібліотечних ресурсів, інтеграцію з IoT-пристроями для моніторингу умов зберігання та надає зручний доступ до електронного каталогу, дозволить бібліотекам підвищити ефективність роботи та полегшити управління ресурсами.

Вже існуючі рішення: Library Management System (LMS), його переваги це легкість в управлінні обліком книг, наявність автоматизованих процесів видачі та повернення. Щодо недоліків, обмежена можливість інтеграції з новими технологіями (IoT, розумний моніторинг) та відсутність гнучких інтерфейсів для користувачів.

Koha, переваги цієї системи у безкоштовну програмну забезпеченні з відкритим кодом, підтримка багатомовності, відслідковування бібліотечних ресурсів.
Але є і недоліки, можливості обмежені старими технологіями, відсутність інтеграції з сучасними IoT-пристроями.

Аналіз цих рішень показує необхідність створення нової системи, яка поєднує ефективне управління бібліотечними ресурсами, автоматизацію, інтеграцію з сучасними технологіями (IoT), та зручність для користувачів.
     
2. Концепція рішення
2.1 Окреслення концепції
Програмна система автоматизації роботи бібліотек буде включати функції для реєстрації книг, ведення електронного каталогу, відслідковування наявності та місцезнаходження книг, автоматизації процесу видачі та повернення книг, а також інтеграцію з IoT для моніторингу умов зберігання. Користувачі зможуть шукати книги за різними критеріями та переглядати інформацію про книги в реальному часі.

Система також дозволить адміністраторам ефективно управляти обліковими записами користувачів, контролювати доступ до книг та забезпечити збереження бібліотечних фондів шляхом моніторингу температури та вологості в приміщеннях.
     
2.2 Головна функціональність 

Головна функціональність для користувачів:
MF-1: Реєстрація та авторизація користувачів 
Користувачі можуть реєструватися та авторизуватися в системі через електронну пошту або соціальні мережі, що забезпечує зручний доступ до особистого кабінету.

MF-2: Пошук книг за різними критеріями 
Користувачі можуть здійснювати пошук книг за назвою, автором, жанром, видавництвом або іншими параметрами.

MF-3: Перегляд електронного каталогу 
Користувачі можуть переглядати електронний каталог книг в реальному часі, що дозволяє отримувати актуальну інформацію про наявність книг у бібліотеці.

MF-4: Видача та повернення книг 
Користувачі можуть здійснювати процес видачі та повернення книг через автоматизовану систему, що мінімізує людський фактор і спрощує цей процес.

MF-5: Інтеграція з IoT для моніторингу умов зберігання книг 
Система інтегрується з IoT-пристроями для моніторингу температури та вологості в бібліотеці, що дозволяє підтримувати оптимальні умови для збереження книг.
     
Головна функціональність для адміністратора:

MF-6: Управління користувачами 
Адміністратори можуть створювати, редагувати та видаляти облікові записи користувачів, призначати ролі та рівні доступу, що забезпечує контроль над доступом до ресурсів бібліотеки.

MF-7: Управління бібліотечними фондами 
Адміністратори можуть реєструвати нові книги в системі, змінювати інформацію про наявні книги та відслідковувати їх місцезнаходження.

MF-8: Налаштування системи
Адміністратори можуть встановлювати глобальні параметри системи, такі як правила для автоматичного резервування, ліміти на кількість книг, які можуть бути видані одному користувачеві, та інші параметри.

MF-9: Моніторинг активності користувачів 
Адміністратори можуть переглядати активність користувачів, історію видачі та повернення книг, а також отримувати статистику про активність в бібліотеці.
     
2.3 Бізнес логіка

Бізнес логіка програмної системи відіграє ключову роль у забезпеченні ефективності автоматизації бібліотечних процесів. Вона охоплює управління бібліотечними фондами, дозволяючи реєструвати, редагувати та видаляти дані про книги, а також відстежувати їхній стан, зокрема наявність, резервування та місцезнаходження. Важливою складовою є автоматизація процесу видачі та повернення книг, яка включає контроль історії операцій, а також генерування автоматичних нагадувань користувачам про терміни повернення.

Моніторинг умов зберігання книг реалізується через обробку даних, отриманих від IoT-пристроїв, з можливістю виявлення відхилень від оптимальних параметрів температури і вологості. Система також виконує розрахунки часу, протягом якого кліматичні умови були аномальними, забезпечуючи своєчасну реакцію на потенційні проблеми.

Управління обліковими записами користувачів передбачає реєстрацію нових користувачів, призначення їм відповідних ролей і контроль доступу до ресурсів бібліотеки. Аналітична частина системи дозволяє отримувати детальну статистику про діяльність бібліотеки, зокрема дані про кількість книг, читачів та їхню активність. Крім того, можливий розрахунок середнього та максимального часу читання книг, що допомагає аналізувати поведінку користувачів і оптимізувати роботу бібліотеки.

3. Рамки та обмеження
3.1 Рамки первинного випуску 
Перший випуск програмної системи включатиме серверну частину та IoT-клієнта. 

* Обробка HTTP-запитів: сервер забезпечує обмін даними між клієнтами та базою даних через RESTful API.
* Реалізація бізнес-логіки: включає управління бібліотечними фондами, моніторинг стану книг, реєстрацію та аутентифікацію користувачів.
* Взаємодія з базою даних: зберігання та отримання даних про книги, користувачів та історію операцій.
* Підтримка MQTT-протоколу: отримання даних від IoT-пристроїв і надсилання команд у разі виявлення відхилень.
* Безпека: шифрування даних, аутентифікація та контроль доступу до серверу.
IoT-клієнт:
* Датчики: пристрої для моніторингу температури та вологості, підключені до мікроконтролера (Arduino).
* Обмін даними через MQTT: публікація інформації про умови в приміщеннях, підписка сервером на ці дані.
* Реакція на зміну умов: у разі відхилень від нормальних параметрів сервер надсилає команди для активації пристроїв (наприклад, кондиціонера або осушувача повітря).
* Енергоефективність: IoT-пристрої працюють у режимі зниженого енергоспоживання з періодичною передачею даних.

3.2 Рамки наступних випусків 

У наступних випусках буде реалізований користувацький інтерфейс для клієнтської частини та покращений для адміністративної частини. Клієнтська частина буде реалізована під мобільний пристрій та буде включати такі функції як: надання детальної інформації про книги, надання каталогу, навігація по каталогу (фільтрація, пошук та сортування), видача та повернення книг. Реалізований в попередньому випуску функціонал ІоТ також працюватиме на клієнтській частині програмної системи. Адміністративна частина буде розширена преміум функціоналом: генерація статистичних звітів. Буде додано можливість покупки преміум функцій.
     
4. Бізнес-контекст
4.1 Робоче середовище
Для реалізації програмної системи автоматизації роботи бібліотек використовуються різноманітні програмні інструменти та технології, що дозволяють ефективно обробляти дані, забезпечувати безпеку та підтримувати інтеграцію з іншими системами.

* C# (ASP.NET Core): Основна мова і платформа для розробки серверної частини. ASP.NET Core використовується для створення веб-API, які забезпечують обмін даними між сервером і клієнтськими додатками, такими як веб-інтерфейси чи мобільні додатки. Завдяки цьому фреймворку забезпечується висока продуктивність, безпека та можливість легкої інтеграції з іншими системами.
* Entity Framework Core (EF Core): ORM (об'єктно-реляційне відображення), яке спрощує роботу з базою даних, зокрема виконання CRUD-операцій. У твоєму проєкті EF Core забезпечує інтерактивну взаємодію з бібліотечною базою даних, автоматизуючи створення запитів до таблиць, таких як книги, читачі, категорії та інше.
* SQL Server (через SQL Server Management Studio): Основна реляційна база даних для зберігання інформації про книги, читачів, статус бронювань, історію видач і повернень. SQL Server забезпечує надійність і продуктивність для обробки великої кількості даних, а SSMS використовується для налаштування, адміністрування і створення складних запитів.
* Для інтеграції з IoT-пристроями будуть застосовані спеціалізовані бібліотеки, сумісні з протоколами IoT (HTTP REST API), IoT-пристрої (датчики температури, вологості).

Доступність – гарантований час доступності системи не менше 99,9% (показник SLA), підтримка одночасної роботи великої кількості користувачів (до 1000 активних сесій одночасно).

Продуктивність – час відповіді серверної частини не повинен перевищувати 2 секунд при стандартному запиті.

Цілісність даних – використання транзакцій для критичних операцій (наприклад, додавання або видалення книги).
Шифрування даних у базі за допомогою стандартів AES-256.
Ці технології забезпечують ефективне управління бібліотечними ресурсами, автоматизацію обліку, а також моніторинг умов зберігання для оптимізації бібліотечної діяльності.

     
     
     
     
     
     


















 Список викорестених джерел:
     
     
     1. Google Cloud. Firebase Firestore: Documentation and Guides. [Онлайн ресурс]. – Доступно за посиланням: https://firebase.google.com/docs/firestore
     2. MQTT.org. MQTT: The Standard for IoT Messaging. [Онлайн ресурс]. – Доступно за посиланням: https://mqtt.org/
     3. Arduino. Official Arduino Documentation. [Онлайн ресурс]. – Доступно за посиланням: https://www.arduino.cc/en/Guide
     4. Next.js. Next.js Documentation. [Онлайн ресурс]. – Доступно за посиланням: https://nextjs.org/docs
     5. Expo. Introduction to Expo for React Native Development. [Онлайн ресурс]. – Доступно за посиланням: https://docs.expo.dev/
     6. Martin, R. Clean Code: A Handbook of Agile Software Craftsmanship. – Prentice Hall, 2008. – 464 p.
     7. Mozilla Developer Network (MDN). Express.js Overview. [Онлайн ресурс]. – Доступно за посиланням: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs





    2

