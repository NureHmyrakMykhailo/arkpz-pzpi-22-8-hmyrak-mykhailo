МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ





Звіт
До лаборотної роботи №5
З дисципліни:
«Аналіз та рефакторінг коду»




	



Виконав:                                                                                       
Ст. гр. ПЗПІ-22-8                                                                                                       
Гмирак Михайло Дмитрович                                                                                    




Перевірив:
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович 









Харків 2024


     1 МЕТА РОБОТИ 
     Розгорнути програмну систему та продемонструвати її роботу.
     
     2 ХІД РОБОТИ
     2.1 Опис розгорнутої програмної системи
     
     Розроблена програмна система забезпечує ефективне управління бібліотечними фондами, зокрема їх обробку, зберігання та контроль. Система складається з серверної частини, розробленої за допомогою C# у середовищі Microsoft Visual Studio,  використовується Microsoft SQL Server для зберігання даних. Вона інтегрована з різними підсистемами для збору та обробки даних, що забезпечує високу функціональність та зручність у використанні.
     Для моніторингу умов зберігання книг, таких як температура, вологість та рівень кисню в бібліотеці, була розроблена IoT система, що здійснює безперервний моніторинг та передачу даних на сервер. 
     
     2.2	 Опис розгортання
     
     Серверна частина:
     * Мова програмування: серверна частина розроблена на C# із використанням ASP.NET Core, що забезпечує високу продуктивність і підтримує сучасні принципи розробки.
     * Архітектура: реалізовано багаторівневу архітектуру, яка розділяє бізнес-логіку, роботу з даними та користувацький інтерфейс. Використовується REST API для взаємодії із зовнішніми клієнтами.
     * Контролери та маршрутизація: для роботи з HTTP-запитами застосовуються контролери з анотаціями типу [HttpGet], [HttpPost], [HttpPut], [HttpDelete]. Кожен метод відповідає за обробку конкретного типу запитів.
     * Конфігурація: усі ключові параметри, такі як підключення до бази даних і налаштування серверів, розташовані у файлі appsettings.json. Це дозволяє централізовано керувати конфігурацією.
     
     База даних:
     * СУБД: використовується Microsoft SQL Server для зберігання даних завдяки його надійності та підтримці складних запитів.
     * Підключення: налаштування підключення до бази даних включає вказівку URL сервера, ім'я користувача, пароль та назву бази даних у секції ConnectionStrings файлу appsettings.json.
     * ORM: використано Entity Framework Core для роботи з базою даних. Завдяки цьому CRUD-операції виконуються автоматично.
     
     Опис інтеграції IoT:
     –	збір даних: система інтегрована з підсистемою збору даних, що включає пристрої для вимірювання температури та вологості. 
     –	обробка даних: всі зібрані дані автоматично надсилаються на сервер через HTTP протокол, де вони обробляються для подальшого аналізу та моніторингу умов у приміщенні бібліотеки.
     
     Збір та передача даних:
     –	датчик температури та вологості:  для вимірювання температури та вологості використовується датчик, дані з датчика зчитуються та відправляються на сервер;
     –	часові мітки: при кожній відправці данних температури на севрвер, записується точний час та дата коли була відправка. 
     
     Інструменти та технології:
     * ASP.NET Core: забезпечує швидку розробку, підтримку модульності та високий рівень безпеки.
     * Microsoft SQL Server: використовується для зберігання даних у реляційній формі.
     * Entity Framework Core: дозволяє зменшити кількість написаного SQL-коду завдяки використанню LINQ.
     * Swagger: використовується для документування API та забезпечення зручного тестування.
     * Visual Studio: основне середовище розробки.
     * Git: застосовується для контролю версійності коду.
     
     Інструкція для разгоратння системи:
     1. Розпакування архіву: отриманий ZIP-архів необхідно розпакувати у робочу директорію.
     2. Редагування файлу конфігурації: відкрити файл appsettings.json у текстовому редакторі та внести необхідні зміни. Наприклад, у секції Kestrel:Endpoints:Http:Url вказати актуальну адресу для розгортання сервера.
     3. Запуск серверної частини: перейти до директорії із розпакованими файлами, знайти файл з розширенням .exe та запустити його, після запуску сториться база даних з мінімальним наповненням, для коректної роботи (Код у  Додаток А).
     4. Перевірка роботи API: після запуску сервера перейти в браузер за вказаною URL-адресою або скористатися інструментом Swagger для тестування роботи API.
     
     3  ВИСНОВОК:
     
     Програмна система успішно розгорнута та протестована в локальному середовищі. Хоча через відсутність доступу до зовнішнього сервера система не була розгорнута на віддаленому сервері, всі компоненти працюють коректно на локальній машині. Це дозволяє продемонструвати всі аспекти роботи системи і її функціональність. 
     Інтеграція з ІоТ системою вимірювання температури, вологості та тиску забезпечує додаткову функціональність та автоматизує процес збору і обробки даних. В подальшому, система може бути легко розгорнута на віддаленому сервері за наявності відповідного доступу та інфраструктури.
     
     
     Посилання на відеоролик: https://youtu.be/SI9Nn4kOi30
     
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
     Додаток А
     Наповнення бази даних при запуску програми необхідними даними
     
     1 public static class DatabaseVerifier
     2 {
     3 
     4     public static void VerifyDatabase(libraryContext db)
     5     {
     6 
     7         // Check if there is at least one record in the Param table
     8         bool hasParams = db.Params.Any();
     9         if (hasParams)
     10        {
     11            Console.WriteLine("Database verification completed.");
     12        }
     13        else
     14        {
     15            Console.WriteLine("The Param table does not contain any records.
     16	Inserting a new record.");
     17 
     18            //db.Database.ExecuteSqlRaw("ALTER DATABASE CURRENT 
     19            COLLATE Cyrillic_General_CI_AI");
     20
     21            // Insert a new record with specified values
     22            var newParam = new Param
     23            {
     24                TempMax = 40,
     25                TempMin = 10,
     26                WetMax = 80,
     27                WetMin = 5
     28            };
     29 
     30            db.Params.Add(newParam);
     31            db.SaveChanges();
     32 
     33            Console.WriteLine("A new record has been inserted into the Param 
     34           table.");
     35
     36            // Insert a new admin user
     37            var adminUser = new User
     38            {
     39                Login = "admin",
     40                Email = "admin@example.com",
     41                PasswordHash = BCrypt.Net.BCrypt.HashPassword("12345"),
     42                Role = "Admin"
     43            };
     44 
     45            db.Users.Add(adminUser);
     46            db.SaveChanges();
     47 
     48            Console.WriteLine("Admin user has been inserted into the Users 
     49            table.");
     50 
     51            // Insert statuses
     52            var statuses = new List<Status>
     53                {
     54                    new Status { StatusId = 1, Name = "Поступила" },
     55                    new Status { StatusId = 2, Name = "Видана" },
     56                    new Status { StatusId = 3, Name = "Повернута" },
     57                    new Status { StatusId = 4, Name = "До архиву" },
     58                    new Status { StatusId = 5, Name = "З архиву" },
     59                    new Status { StatusId = 6, Name = "Коментар" },
     60                    new Status { StatusId = 7, Name = "Списана" },
     61                    new Status { StatusId = 8, Name = "Резерв" }
     62                };
     63 
     64            db.Statuses.AddRange(statuses);
     65            db.SaveChanges();
     66 
     67            Console.WriteLine("Statuses have been inserted into the Status 
     68            table.");
     69         }
     70    }
     71 
     72 }
     
      
2

