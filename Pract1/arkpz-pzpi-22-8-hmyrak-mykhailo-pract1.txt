МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ
РАДІОЕЛЕКТРОНІКИ



Звіт до
Практичного заняття №1
з дисципліни
«Аналіз та рефакторінг коду»
На тему: «Правила оформлення програмного коду»



Виконав:
Ст. гр. ПЗПІ-22-8 
Гмирак Михайло Дмитрович

Перевірив:
ст. викладач кафедри ПІ
 Сокорчук Ігор Петрович



Харків 2024





1. Мета роботи
Ознайомитися з основними рекомендаціями щодо написання чистого, 
ефективного та підтримуваного коду на мові програмування C#. Навчитися 
аналізувати та рефакторити код для покращення його якості.

2. Завдання
1) Дослідити основні рекомендації для написання якісного коду на C#.
2) Продемонструвати ці рекомендації на прикладах коду.
3) Обґрунтувати кожну рекомендацію та надати детальні пояснення.
4) Підготувати презентацію на основі досліджень.

3. Хід роботи 
Мною Було обрано мову програмування C#. У презентації (Додаток А) наведено 
основні рекомендації щодо оформлення програмного коду з описами, а також 
приклад коду до і після застосування цих рекомендацій.

1) Рекомендація: Дотримуйтесь загальних правил оформлення в C#

Опис: Використовуйте зрозумілі назви для змінних, методів і класів, 
Використовуйте коментарі для пояснення складних ділянок коду, дотримуйтеся 
відступів і додавайте порожні рядки для покращення читабельності.


1 // Погано:
2 int x = 10;
3
4 // Добре:
5 int studentAge = 10;
6 
7 // Обчислює суму двох чисел
8 int Sum(int a, int b)
9 {
10 return a + b;
11 }
12
13 if (condition)
14 {
15 // Виконати дію, якщо умова істинна
16 DoSomething();
17 }
18 else
19 {
20 // Виконати іншу дію, якщо умова хибна
21 DoSomethingElse();
22 }



2) Рекомендація: Чіткі та лаконічні функції полегшують розуміння коду, 
тестування та підтримку. Кожна функція має виконувати одну конкретну 
задачу, щоб забезпечити легкість її використання та модифікації.

Опис: Чіткість і стислость: Функція має бути компактною та виконувати одну 
конкретну задачу. Розділяйте складні функції на менші логічні 
блоки.Відповідність імені призначенню: Ім'я функції має відображати те, що 
вона робить.Наприклад, використовуйте GetUserAge, а не просто 
GetData.Однакові шаблони для схожих функцій: Якщо у вас є кілька функцій, 
які виконують схожі завдання, дотримуйтесь єдиного стилю в їхньому 
найменуванні та структурі.


1 // Поганий приклад: нечітка функція, яка виконує кілька задач
2 public void ProcessUserData(User user)
3 {
4 // Оновлення імені
5 user.Name = user.Name.Trim().ToUpper();
6 
7 // Перевірка віку
8 if (user.Age < 18)
9 {
10 throw new InvalidOperationException("User is underage");
11 }
12
13 // Збереження в базі даних
14 SaveToDatabase(user);
15 }
16
17 // Гарний приклад: функції виконують конкретні задачі
18 public void UpdateUserName(User user)
19 {
20 user.Name = user.Name.Trim().ToUpper();
21 }
22
23 public void ValidateUserAge(User user)
24 {
25 if (user.Age < 18)
26 {
27 throw new InvalidOperationException("User is underage");
28 }
29}
30
31 public void ProcessUserData(User user)
32 {
33 UpdateUserName(user);
34 ValidateUserAge(user);
35 SaveToDatabase(user);
36 }


3) Рекомендація: У C# стандартом є використання 4 пробілів для кожного 
рівня відступу. Відступи допомагають організувати код і покращити його 
читабельність. У C# круглі дужки використовуються для визначення параметрів 
методів і викликів функцій, тоді як фігурні дужки відкривають блоки коду. У 
C# вірно вирівнюйте оператори (наприклад, =, +, -) і вирази, щоб полегшити 
сприйняття коду.

Опис: У першому прикладі видно, що форматування коду у C# залишає 
бажати кращого. Відсутні пробіли між параметрами, немає відступів, а 
фігурні дужки розміщені неправильно. Усе це робить код важким для 
читання та розуміння.У другому прикладі продемонстровано правильне 
форматування в C#. Використовуються 4 пробіли для відступів, параметри 
розділені пробілами, а фігурна дужка відкрита на тій же лінії, що й 
оголошення методу. Це робить код легким для сприйняття і зрозумілим 
для інших розробників.



1 // Поганий приклад: неясне форматування
2 public void CalculateSum(int a,int b)
3 {
4 int sum=a+b; 
5 Console.WriteLine("Sum is: " + sum); 
6 }
7
8 // Гарний приклад: структуроване форматування
9 public void CalculateSum(int a, int b)
10 {
11 int sum = a + b; 
12 Console.WriteLine("Sum is: " + sum);
13 }


Висновки
Запропоновані рекомендації спрямовані на покращення якості коду в C# 
шляхом підвищення його читабельності, зрозумілості та простоти підтримки. 
Важливість цих принципів полягає в тому, що вони допомагають уникнути 
поширених помилок, які можуть ускладнити роботу з кодом у майбутньому. 
Спрощення умовних виразів, використання чітких імен для змінних та методів, 
а також належне форматування сприяють створенню чистого коду, що значно 
спрощує процеси розробки та командної роботи


Посилання на відеозапис: https://youtu.be/Bwj8aTsgFtE

Список викорастанних джерел:
https://martinfowler.com/books/refactoring.html
https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions
https://www.microsoftpressstore.com/store/code-complete-35-9780735619678
https://refactoring.guru/

ДОДАТОК А
Рисунок 1 – Титульний лист презентації
Рисунок 2 – Введення
Рисунок 3 - Загальні правила оформлення коду в C#
Рисунок 4 – Рекомендації щодо функцій
Рисунок 5 – Приклади поганої функції, та функції після рефакторингу
Рисунок 6 - Рекомендіції щодо відступів, дужок, та вирівнювання
Рисунок 7 – Приклад з поганим кодом, та кодом після рефакторингу
Рисунок 8 – Рекомендації оформлення файлів
Рисунок 9 - Висновок
Рисунок 10 – Список викорастених джерел
Рисунок 11 – Завершальний слайд “дякую за увагу”

